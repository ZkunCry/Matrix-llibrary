					/********Matrix-library********\
						//Подключение библиотеки//
Подключение библиотеки происходит таким образом:
Для начала пользователю нужно скачать с github библиотеку(.lib файл, .h заголовок) и добавить в папку своего проекта.
Затем необходимо указать .lib файл эдиножды, желательно в главном/первом файле программы, с помощью директивы препроцессора #pragma
#pragma comment(lib, "StaticLib.lib")
Затем подключить заголовочный файл "matrix.h"(нужны именно кавычки, без них не будет работать)
Ссылка на github : https://github.com/ZkunCry/Matrix-llibrary
//////////////////
							
Все функции, которые производят вычисления с матрицей(двумя матрицами) принимают указатели на матрицу.
Поэтому при передаче исходной матрицы в функцию, перед названием матрицы стоит поставить Амперсанд(&), то есть
передать адрес матрицы в памяти.
Также, перед использованием данных функций советую ознакомиться с операциями над матрицами, чтобы при использовании
каждой функции  не появлялись ошибки.
/////
					////////Функции для работы с матрицей(матрицами)///////
Matrix division(Matrix* a, Matrix* b);
Функция деления матриц. На вход получает две матрицы-матрицу А и матрицу Б, на которую надо поделить.
Возвращает в качестве результата новую матрицу.


Matrix summatrix(Matrix* x, Matrix* y);
Функция сложения матриц. На вход получает также две матрицы, которые нужно сложить.
В качестве результата возвращает матрицу, которая получилась в результате сложения.

Matrix subtraction(Matrix* x, Matrix* y);
Функция нахождения разности матриц. На вход получает также две матрицы, у которых нужно найти разность.
В качестве результата возвращает новую матрицу.

Matrix multiplication(Matrix* x, Matrix* y);
Функция умножения матриц. На вход получает матрицу размером N x M и M x N(не забываем правила умножения матриц).
В качестве результата возвращает матрицу N x M.
            
void transp(Matrix* a);
Функция транспонирования матрицы. На вход получает матрицу размерностью N x M.
В качестве результата изменяет исходную матрицу.

void mulnum(Matrix* a, double k);
Функция умножения матрицы на число. На вход получает матрицу любой размерности и число.
Данная функция ничего не возвращает, а изменяет матрицу, которую пользователю передал в функцию.

Matrix gauss(Matrix* a);
Функция нахождения треугольной матрицы по методу Гаусса. На вход получает квадратную матрицу.
В качестве результата возвращает новую матрицу.

void input(Matrix* x);
Функция ввода матрицы с клавиатуры.

void getmemory(Matrix* x, int N, int M);
Функция инициализации матрицы,т.е "выдачи" памяти для матрицы. На вход получает матрицу и размерность ее.

void output(Matrix* x);
Функция вывода матрицы на экран.

void removemem(Matrix* a);
Функция очистки матрицы.В данном случае производится очистка выделенной памяти двумерного массива, во избежании утечки памяти.

void inversion(Matrix* a);
Функция нахождения обратной матрицы. Принимает в качестве параметра квадратную матрицу и в качестве результата новая матрица
записывается в исходную.

////Компараторы для функций
int subsum(Matrix* x, Matrix* y);
В данном случае компараторы проверяеют,соблюдены ли правила сложения,вычитания и умножения матриц.
Если матрицы пользователя неудовлетворяют условию, то функция возвращает 0(ложь), в другом случае 1(истина).
int multi(Matrix* a, Matrix* b);
////
double det(Matrix* matrix);
Функция нахождения определителя матрицы. На вход получает только квадратную матрицу.
Возвращает в качестве результата определитель матрицы.

void equating(Matrix* a, Matrix* b);
Функция, которая приравнивает матрицы. То есть, в матрицу А записываются все значения и размерность матрицы Б.

void saveFile(Matrix* a,char *filename);
Функция сохранения матрицы в файл. Принимает матрицу и имя файла.

void outerror(int typeError, const char* errStr);
Функция обработки ошибок.
Если при использовании какой-либо функции, пользователь не соблюдает условия, то на экран выводится ошибка, название функции,
в которой произошла ошибка и тип ошибки.

void loadFile(Matrix* a,char *filename);
Функция загрузки матрицы из файла. Также принимает матрицу и имя файла.

//
